What happens when you initialize a repository? Why do you need to do it?

Git creates some default folder and files representing that there exists
a repository. We initialize a repository to imply that we are using Git
to manage the project.


How is the staging area different from the working directory and the repository? What value do you think it offers?

A working directory is the directory that I'm currently working on. It 
includes a 'root' directory and all files in this directory (and subdirectories).
A repository is a history of commits.
Staging area is not the history, and it is also not the whole directory.
It allows us to modify whatever files in the working directory, but still commit
what should be a logical part.


How can you use the staging area to make sure you have one commit per logical change?

I can use 'git diff --staged' command to compare the changes in staging area and
in the last commit. The changes among these files should be in a logical part.


What are some situations when branches would be helpful in keeping your history organized? How would branches help?

create experimental functionality while maintaining running codes.
different functions/languages for different places.
branches can have name.


How do the diagrams help you visualize the branch structure?

With diagrams, I can have a clear view of where are each branches and their 
relations.


What is the result of merging two branches together? Why do we represent it in the diagram the way we do?

The addition and deletion are combined together.
The HEAD commit will have two parents.


What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?

It may give unwanted results.
But it is automatic, so it is less annoying.